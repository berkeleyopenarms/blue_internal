<launch>
  <!-- Load configuration -->
  <rosparam file="$(find blue_calibrate)/config/link_parameters.yaml" command="load"/>
  <rosparam file="$(find blue_calibrate)/config/link_control_parameters.yaml" command="load"/>

  <!-- Load URDFs -->
  <param
    name="robot_dyn_description"
    textfile="$(find blue_description_link)/robots/blue_description_link.urdf" />

  <param
    name="robot_description"
    textfile="$(find blue_description_link)/robots/blue_description_link.urdf" />
  <!-- Start rviz for visualization/debugging -->
  <node
    name="rviz"
    pkg="rviz"
    type="rviz"
    args="-d $(find blue_description_link)/urdf.rviz" />

  <!-- [> GUI <] -->
  <node
    name="gui_for_debugging"
    pkg="rqt_gui"
    type="rqt_gui"
    output="screen"/>

  <!-- Start the control stack -->
  <node
    name="blue_controller_manager"
    pkg="blue_controller_manager"
    type="blue_controller_manager"
    output="screen" />

  <node name="controller_spawner"
    pkg="controller_manager"
    type="spawner"
    respawn="false"
    output="screen"
    args="blue_controllers/joint_state_controller blue_controllers/torque_controller" />

  <!-- Joint calibration -->
  <node
    name="hardstop_calibrator"
    pkg="blue_bringup"
    type="hardstop_calibrate"
    output="screen"/>

  <!-- Broadcast our joint states as TFs -->
  <node
    name="robot_state_publisher"
    pkg="robot_state_publisher"
    type="state_publisher" />

  <!-- Position the robot in the world-->
  <node
    name="transformer"
    pkg="tf"
    type="static_transform_publisher"
    args="0.0 0.0 0.0 0.0 0.0 0.0 1 world base_link 100"/>

  <!-- Accept connections from our Python API via rosbridge -->
  <include
    file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" />

</launch>
